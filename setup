################################################################################
# Setup / Install Dotfiles.
# Wil Moore III <wil.moore@wilmoore.com>
#
# This script performs the following tasks:
#
#  - set default shell.
#  - clone/update dotfiles repo.
#  - locate and link linkable files, make backups for existing non-link files.
#  - list broken symlinks.
################################################################################

set -e

################################################################################
# configuration
################################################################################

DOTFILES_CLONE_URL='https://github.com/wilmoore/dotfiles.git'
DOTFILES_ROOT_PATH="$HOME/.dotfiles"
SOURCE="$DOTFILES_ROOT_PATH/active"
BACKUP="$HOME/.backup/dotfiles"

################################################################################
# output functions
################################################################################

say () {
  printf "\r [ \033[00;34m..\033[0m ] $1\n"
}

pass () {
  printf "\r\033[2K [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

################################################################################
# helper functions
################################################################################

#
# does file exist as a real file (non-link)
#

real_file_exists () {
  [[ -f "$1" && ! -L "$1" ]] && return 0
  return 1
}

real_dir_exists () {
  [[ -d "$1" && ! -L "$1" ]] && return 0
  return 1
}

#
# list linkable dotfiles
#

linkable_dotfiles () {
  find "$1" -maxdepth 1 -mindepth 1 \
    ! -name 'setup' \
    ! -name '*.swp' \
    ! -name '*.md'
}

################################################################################
# set default shell to "ZSH" (TODO: move to brew-chsh-zsh)
################################################################################

#TARGET_SHELL=zsh
#say "Preparing to set set default shell to $TARGET_SHELL"

#if [[ "$(brew --prefix $TARGET_SHELL)/bin/$TARGET_SHELL" == "$SHELL" ]]; then
#  say "$TARGET_SHELL already active as $SHELL...nothing to do!"
#else
#  [[ -e "$(brew --prefix $TARGET_SHELL)/bin/$TARGET_SHELL" ]] || fail "$TARGET_SHELL does not seem to be available...aborting!"
#  sudo dscl localhost change /Local/Default/Users/$USER UserShell $SHELL $(brew --prefix $TARGET_SHELL)/bin/$TARGET_SHELL || fail "Unable to set shell to $TARGET_SHELL"
#  say "done...shell is now $SHELL"
#fi

################################################################################
# clone dotfiles repo
################################################################################

say "Preparing to clone dotfiles..."

if [[ -d $DOTFILES_ROOT_PATH ]]; then
  say "dotfiles directory exists; preparing to update [$DOTFILES_ROOT_PATH]"

  cd $DOTFILES_ROOT_PATH || fail "command failed: [cd $DOTFILES_ROOT_PATH]...aborting!"

  say "current directory: $(pwd)"

  git pull 2>/dev/null || fail "command failed: [git pull]...aborting!"
  git submodule update --init --recursive 2>/dev/null || fail "command failed: [git submodule update --init --recursive]...aborting!"

  cd -

  say "dotfiles repository successfully updated"
else
  git clone --recursive $DOTFILES_CLONE_URL $DOTFILES_ROOT_PATH || fail "unable to clone dotfiles"
  say "dotfiles repository successfully cloned"
fi

################################################################################
# locate and link linkable files, make backups for existing, non-link files
################################################################################

say "Preparing to link dotfiles..."

if [[ -d $SOURCE/.git ]]; then
  fail "dotfile source directory should not be the root of a git repository...aborting!"
fi

for rcfile in $(linkable_dotfiles $SOURCE); do
  mkdir -p $BACKUP

  linkpath="$HOME/$(basename $rcfile)"
  backpath="$BACKUP/$(basename $rcfile)-$(date '+%Y%m%d%H%M%S')"

  say "Preparing to link ($rcfile) ==> ($linkpath)."

  if real_file_exists "$linkpath" || real_dir_exists "$linkpath"; then
    say "REAL FILE/DIR EXISTS: ($linkpath) -- creating backup file ($backpath)."
    cp "$linkpath" "$backpath"
  fi

  ln -nfs "$rcfile" "$linkpath" && pass "created link: ($linkpath)"
done

################################################################################
# remove unwanted dotfiles
################################################################################

say "removing extra superfluous dotfiles"
rm -rf ~/.{gitignore_global,hgignore_global,bzr.log,DS_Store,CFUserTextEncoding,bash_history,gnupg,pearrc,rnd,subversion}

################################################################################
# show broken symlinks
################################################################################

say "List of broken symlinks"
  find -L $HOME -type l -maxdepth 1

################################################################################
# notes
################################################################################

say 'If you are bootstrapping this system for the first time, you should now run: `source ~/.runscript/bootstrap.sh`'

################################################################################
# fin
################################################################################

pass "dotfile installation completed successfully."

