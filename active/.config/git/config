################################################################################
# My Personal Git Configuration -- `git config --global -e`
# Wil Moore III <wil.moore@wilmoore.com>
#
# Most of the aliases can be cherry-picked (see what I did there); however; a
# small few have dependencies on other aliases (i.e. sync*, finish*).
#
# Always up-to-date @:
# - http://git.io/Y1Ad2g
#
# For further inspiration, see:
# - http://git.io/kELRRA
# - https://github.com/visionmedia/git-extras
# - https://github.com/mhartl/git-utils
################################################################################

[user]
  name                = Wil Moore III
  email               = wil.moore@wilmoore.com

[credential]
  # `brew install git` [installs the git-credential-osxkeychain binary](http://git.io/yjOG-Q).
  # otherwise, `git osxkeychain-help` (aliased below) or navigate to http://git.io/dz-m6w.
  helper              = osxkeychain

[github]
  user                = wilmoore

[gh]
  # for use with [gh: GitHub command line client](https://github.com/jingweno/gh)

  # always use https
  protocol            = https
  autoUpdate          = never

[remote "origin"]
  fetch               = +refs/pull/*/head:refs/remotes/origin/pr/*

[core]
  bare                = false

  # while `~/.config/git/ignore` is the default, we define it anyhow because some programs (cough, souretree) do weird and rude things when this is blank.
  excludesfile        = ~/.config/git/ignore

  filemode            = true

  ignorecase          = false

  logallrefupdates    = true

  quotepath           = false

  # Use "less" as the pager...this will provide nice colors
  pager               = less -R

  # Whitespace problems git should recognize
  # (1) EOL whitespace
  # (2) mixed spaces and tabs
  whitespace          = trailing-space,space-before-tab

[color "diff-highlight"]

  oldNormal           = red bold
  oldHighlight        = red bold 52
  newNormal           = green bold
  newHighlight        = green bold 22

[http]
  # see:
  # - https://github.com/isaacs/npm/pull/4222
  sslVerify           = false

[help]
  # wait .5 seconds before autocorrecting
  autocorrect         = 5

[grep]
  # show line numbers in grep results
  lineNumber          = true

[color]
  ui                  = true

[pager]

  diff                = diff-so-fancy | less --tabs=1,5 -RFX
  show                = diff-so-fancy | less --tabs=1,5 -RFX

[push]
  # safe handling when no refspec is given (i.e `git push`). The default in Git 2.x is 'simple'.
  default             = simple

[rerere]
  # Reuse recorded resolution of conflicted merges:
  # - http://shop.oreilly.com/product/0636920024774.do
  # - http://git-scm.com/2010/03/08/rerere.html
  enabled             = true
  autoupdate	      = true

[merge]
  # see: https://git-scm.com/docs/git-merge
  conflictstyle       = diff3

  # brew cask install kaleidoscope
  tool                = Kaleidoscope

[mergetool]
  keepTemporaries     = false

  keepBackup          = false

  prompt              = false

[mergetool "Kaleidoscope"]
  # brew cask install ksdiff
  cmd                 = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot

  trustExitCode       = true

[diff]
  # brew cask install kaleidoscope
  tool                = Kaleidoscope

[difftool]
  prompt              = false

[difftool "Kaleidoscope"]
  # brew cask install ksdiff
  cmd                 = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[alias]
  # locate commit where a particular file was introduced
  added-file          = log --diff-filter=A --

  # list aliases
  aliases             = !git config --get-regexp '^alias.' | awk -F '[. ]' '{ print $2 }'

  # list contributors with format `Name <email>` format.
  authors             = !git shortlog -nes | tr -s ' ' | cut -f2-

  # backup current branch
  backup-branch       = !OB=$(git name-rev --name-only HEAD) && BB=__SQUASH_BACKUP_$OB && git branch -M $OB $BB && git checkout -b $OB && git branch

  # list git sub-commands (lots of gems in there)
  bin                 = !find $(git --exec-path) -type f | xargs basename -a | $(git config --get core.pager)

  # https://coderwall.com/p/x8xbnq/git-don-t-blame-people-for-changing-whitespaces-or-moving-code
  blame               = blame -w -M

  # number of commits in this branch
  branch-commit-count = !git log upstream/master.. --no-merges --format=oneline | wc | awk '{ print $1 }'

  # up-to-date list of all branches (local and remote)
  branches            = !git fetch --all --prune && git branch --all

  # stage and commit given file
  checkin             = ![[ -z "$*" ]] && echo 'No file name was provided.' 1>&2 && exit 1 || git stage "$*" && git commit $!

  # diff current HEAD against master (this is what you want 90% of the time if you work in topic branches)
  compare             = diff HEAD..master --

  # list "conflicted" files (files containing conflict markers)
  conflicted          = grep --name-only --full-name '<<<<<<< HEAD'

  # list contributor stats for this repo
  contributors        = !git shortlog -nes --no-merges $@ | cat - && echo && echo total $(git rev-list --count HEAD)

  # count modified files
  count-modified      = !echo $(git status --porcelain | grep -E '[^MARC]' | wc -l | awk '{ print $1 }') files modified

  # templates for giving credit to another author
  credit-author       = !echo 'Pending Commit:' && \
			 echo '% git commit -am "commit message" --author "Full Name <name@domain.tld>"' && \
			 echo '' && \
			 echo 'Existing Commit:' && \
			 echo '% git commit --amend --author "Full Name <name@domain.tld>" -C HEAD'

  # list current branch.
  current-branch      = name-rev --name-only HEAD

  # consider a topic branch "finished" by deleting it locally and from your "origin" remote (also deletes squash backups).
  finish              = ![[ -z "$*" ]] && echo 'No branch was provided.' 1>&2 && exit 1 || git branch -d "$*" && git push origin --delete $!

  # `git finish` all branched emitted by `git merged`
  finish-merged       = !git merged | xargs git finish

  # edit your global config
  edit-config         = config --global -e

  # open files with conflict markers in your configured editor
  edit-conflicted     = !$EDITOR $(git grep --name-only --full-name '<<<<<<< HEAD' | awk '{print $NF}')

  # edit last 5 files commited
  edit-last-commited  = !$EDITOR $(git log --pretty=format: --name-only | grep -vE '^$' | head -n 5 | sort -u)

  # open modified files in your configured editor
  edit-modified       = !$EDITOR $(git status --porcelain | grep -E '[^MARC]' | awk '{print $NF}')

  # name of branch that current branch is based on.
  fork-point          = !git branch --contains $(git merge-base --fork-point HEAD) | grep -v $(git name-rev --name-only HEAD) | tr -d ' '

  # group grep search results (much more readable this way)
  grep-group          = grep --break --heading --line-number

  # commit history in graph format: abbreviated commits ID, one commit per line + with commit references (like git log --decorate)
  history             = log --graph --decorate --pretty=oneline --abbrev-commit

  # show ignored project files
  ignored             = !git status --ignored | grep -F 'Ignored files:' -A100

  # navigate to the JIRA story corresponding to the current branch (`git set-jira-domain your domain` to configure.
  # assumes branch name begins with JIRA story ID
  jira-branch         = !git web--browse $(git config --get jira.serverurl)/browse/$(git name-rev --name-only HEAD | cut -d- -f1-2) >/dev/null 2>&1 || echo 'To set your Jira Server Url: `git config --replace-all jira.serverurl http://...`'

  # last 5 files commited
  last-commited       = !git log --pretty=format: --name-only | grep -vE '^$' | head -n 5 | sort -u

  # list release tags for:
  list-releases       = tag --list
  list-releases-beta  = tag --list *-BETA

  # list commits not yet pushed to remote
  local               = log --branches --not --remotes

  # show commits where my github user name is the author
  log-github-user     = !git log --author="$(git config --get github.user)"

  # markdown-friendly list of topic/branch related logs (great for Github pull requests)
  markdown            = !BN=$(git name-rev --name-only HEAD) && git log --no-merges --grep=$BN --pretty=oneline | awk -F"$BN: " '{print \"-\", $NF}' | uniq

  # show branches that have been merged into current (HEAD) branch
  merged              = !git fetch --all --prune >/dev/null && git branch --all --merged HEAD | grep -Ev '^\\s+remotes/' | grep -Ev 'master$'

  # show branches that have not been merged into current (HEAD) branch
  not-merged          = !git fetch --all --prune >/dev/null && git branch --all --no-merged HEAD | grep -Ev '^\\s+remotes/' | grep -Ev 'master$'

  # resolve conflicts by keeping only your own changes for a file throwing away incoming changes.
  only-mine           = checkout --ours --

  # resolve conflicts by keeping only the incoming changes for a file throwing away your own changes.
  only-theirs         = checkout --theirs --

  # add a remote named origin
  origin              = remote add origin

  # navigate to help on installing `git-credential-osxkeychain`
  osxkeychain-help    = web--browse http://git.io/dz-m6w

  # terminal tab reflecting your current git project name (https://gist.github.com/3874729)
  # TODO: ZSH compatibility (currently BASH-only)
  project-name        = config --replace-all project.info.name

  # push current HEAD to `origin` remote setting upstream.
  push-origin-head    = push --set-upstream origin HEAD
  # push current HEAD to `origin` remote setting upstream.
  poh		      = push --set-upstream origin HEAD

  # push current HEAD to `upstream` remote setting upstream.
  push-upstream-head  = push --set-upstream upstream HEAD
  # shortcut to `push-upstream-head`
  puh		      = push-upstream-head

  # github style pull request against origin regarding current branch (FYI, make sure you are using an `https` origin url; otherwise, this won't work)
  pr                  = !git web--browse $(git config --get remote.origin.url | sed 's/.git$//')/pull/new/$(git name-rev --name-only HEAD)

  # repo hosting url
  repo-url            = !git web--browse http://$(git config --get remote.origin.url | sed -e 's/[.]git$//g' -e 's/.*@//g' -e 's@^http[s]?//@@g' | tr ':' '/')

  # stage file after resolving a merge conflict (like svn, hg)
  resolve             = stage --

  # show the path to root directory of git repo
  root		      = rev-parse --show-toplevel

  # `git merge --squash` current branch
  squash              = merge --squash

  # stage all outstanding changes found within the entire project
  stage-everything    = add --all :/

  # a more convenient way to say `git sync-rebase`
  # sync                = !git sync-rebase

  # fetch and rebase, first from origin/HEAD, then from upstream/HEAD; finally, push (force) to origin/HEAD
  # sync-rebase         = !git pull --rebase --ff origin HEAD && git pull --rebase --ff upstream master && git push -u origin +HEAD

  # same as `git sync`; however, do not rebase and does not force push
  # sync-no-rebase      = !git pull --no-rebase --ff origin HEAD && git pull --no-rebase --ff upstream master && git push -u origin HEAD

  # decorated graph view of one liner summarized commits from all branches. (inspired by git-extras)
  tree                = log --all --graph --decorate --oneline --simplify-by-decoration

  # undo local changes
  undo                = checkout --

  # remove staged changes from the index: (1) provide file name/pattern (2) otherwise, removes all
  unstage             = reset HEAD --

  # list untracked files
  untracked           = ls-files -o

  # add a remote named upstream
  upstream            = remote add upstream
